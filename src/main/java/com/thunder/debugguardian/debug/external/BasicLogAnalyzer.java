package com.thunder.debugguardian.debug.external;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Basic heuristic log analyzer. It inspects thread reports to identify the
 * most frequently mentioned mod and highlights the top stack frame for each
 * thread. This acts as a placeholder for a future AI-powered implementation.
 */
public class BasicLogAnalyzer implements LogAnalyzer {

    @Override
    public String analyze(List<ThreadReport> threads) {
        if (threads.isEmpty()) {
            return "No thread information available.";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("Thread analysis:\n");

        for (ThreadReport tr : threads) {
            String topFrame = tr.stack().isEmpty() ? "unknown" : tr.stack().get(0);
            sb.append(tr.thread()).append('\n')
              .append("  suspect mod: ").append(tr.mod()).append('\n')
              .append("  top frame: ").append(topFrame).append("\n\n");
        }

        Map<String, Long> counts = threads.stream()
                .collect(Collectors.groupingBy(ThreadReport::mod, Collectors.counting()));

        counts.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .findFirst()
                .ifPresent(entry -> sb.append("\nMost frequent mod: ")
                        .append(entry.getKey())
                        .append(" (")
                        .append(entry.getValue())
                        .append(" thread(s))\n"));

        sb.append("\nAnalysis generated by heuristic rules. Future versions may ")
          .append("integrate an AI service for deeper insights.");

        return sb.toString();
    }
}
